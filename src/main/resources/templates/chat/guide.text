1. postman에 get요청으로
   "localhost:8080/join/sara"
   "localhost:8080/join/tony"
   "localhost:8080/join/duck"
   이런 식으로 테스트 계정을 만든다.
2. "http://localhost:8080/chat/room/2?myId=1"
   "http://localhost:8080/chat/room/3?myId=1"
   "http://localhost:8080/chat/room/1?myId=2"
   "http://localhost:8080/chat/room/1?myId=3"
   이런 식으로 테스트 채팅방을 만든다.
3. "http://localhost:8080/chat/rooms?myId=1"
   "http://localhost:8080/chat/rooms?myId=2"
   "http://localhost:8080/chat/rooms?myId=3"
   이런 식으로 테스트 채팅방 목록을 만든다.
4. 채팅방 목록을 통해 채팅방에 들어가면
   "http://localhost:8080/chat/room/2?myId=1&yourNickname=sara"
   "http://localhost:8080/chat/room/1?myId=2&yourNickname=tony"
   "http://localhost:8080/chat/room/3?myId=1&yourNickname=guck"
   "http://localhost:8080/chat/room/1?myId=3&yourNickname=tony"
   이런 식으로 최종 서비스할 수 있는 채팅방이 생성된다.







stateless한 HTTP 특성상 실시간 양방향 통신이 필요한 채팅 서비스에서는 statefull한
프로토콜이 필요했다. 때문에 HTTP 단에서 동작하는 웹 소켓을 사용하여 실시간 채팅 서비스를
구현하였다. 더하여 웹 소켓 단에서 동작하는 STOMP를 사용하여 통신 과정은 단순화하되 호환성은
확대된 기능으로 구현하였다. 채팅 내역은 RDB에 저장되며 채팅방을 재요청했을 때 기존 채팅 내역을
DB에서 불러오도록 구현하였다. DB에는 채팅을 보낸 사용자의 id와 받는 사용자의 id 외에
식별 정보가 저장되지 않는다. 따라서 각각의 채팅방을 고유하게 식별하기 위한 식별 id값으로
두 사용자의 id를 오름차순으로 정렬하고 각 id 사이에 'A'라는 구분자를 넣어 사용자간 채팅방을
식별하도록 설계하였다. 채팅 작성자가 채팅을 서버로 보내면 서버의 메세지 브로커는 해당 요청을
식별하여 연결된 클라이언트들에게 메세지를 전달한다. 본 프로젝트에서 채팅은 1:1만을 서비스하기
때문에 보내는 클라이언트는 받는 클라이언트를 지정하여 채팅을 보내게 된다.